safeErrorAssignmentWithQueryAction function() -> error|() {
    %0(RETURN) error|();
    %1(SYNTHETIC) ();
    %2(SYNTHETIC) error|();
    %4(TEMP) boolean;
    %8(SYNTHETIC) error;
    %11(LOCAL) error;
    %13(LOCAL) int;
    %15(SYNTHETIC) ();
    %16(SYNTHETIC) error|();
    %28(SYNTHETIC) int;
    %29(SYNTHETIC) int;
    %30(SYNTHETIC) int|error;
    %39(SYNTHETIC) ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0;
    %41(SYNTHETIC) int;
    %43(SYNTHETIC) int;
    %47(TEMP) ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0;
    %48(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %49(SYNTHETIC) ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0;
    %51(SYNTHETIC) typeDesc<error|()>;
    %53(SYNTHETIC) typeDesc<error|()>;
    %55(SYNTHETIC) boolean;
    %62(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %63(SYNTHETIC) function(ballerina/lang.query:0.0.0:_Frame) -> ballerina/lang.query:0.0.0:_Frame|error|();
    %67(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %69(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %73(TEMP) ();
    %74(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %75(SYNTHETIC) function(ballerina/lang.query:0.0.0:_Frame) -> any|error;
    %79(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %81(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %85(TEMP) ();
    %86(SYNTHETIC) stream<typeRefDesc<>, typeRefDesc<>>;
    %87(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %91(SYNTHETIC) any|error{map<ballerina/lang.value:0.0.0:Cloneable>};
    %92(SYNTHETIC) stream<typeRefDesc<>, typeRefDesc<>>;
    %99(SYNTHETIC) error{map<ballerina/lang.value:0.0.0:Cloneable>};
    %103(TEMP) error{map<ballerina/lang.value:0.0.0:Cloneable>};
    %104(SYNTHETIC) boolean;
    %117(TEMP) error{map<ballerina/lang.value:0.0.0:Cloneable>};
    %118(SYNTHETIC) error;
    %131(TEMP) error|();
    %133(SYNTHETIC) ();
    %134(SYNTHETIC) typeRefDesc<>|();
    %143(SYNTHETIC) ();
    %144(SYNTHETIC) error|();
    %152(LOCAL) string;
    %154(SYNTHETIC) ();
    %155(SYNTHETIC) error|();
    %164(SYNTHETIC) ();
    %165(SYNTHETIC) Error|();
    %175(SYNTHETIC) ();
    %176(SYNTHETIC) Error|();

    bb0 {
        %2 = foo() -> bb1;
    }
    bb1 {
        %4 = %2 is ();
        %4? bb2 : bb3;
    }
    bb2 {
        %1 = <()> %2;
        GOTO bb9;
    }
    bb3 {
        %8 = <error> %2;
        GOTO bb4;
    }
    bb4 {
        %11 = %8;
        %13 = ConstLoad 10;
        %16 = foo() -> bb5;
    }
    bb5 {
        %4 = %16 is ();
        %4? bb6 : bb7;
    }
    bb6 {
        %15 = <()> %16;
        GOTO bb8;
    }
    bb7 {
        %8 = <error> %16;
        %0 = %8;
        GOTO bb56;
    }
    bb8 {
        %0 = %11;
        GOTO bb56;
    }
    bb9 {
        %30 = bar() -> bb10;
    }
    bb10 {
        %4 = %30 is int;
        %4? bb11 : bb12;
    }
    bb11 {
        %29 = <int> %30;
        GOTO bb13;
    }
    bb12 {
        %8 = <error> %30;
        GOTO bb4;
    }
    bb13 {
        %28 = %29;
        %41 = ConstLoad 1;
        %43 = ConstLoad 2;
        %47 = createIntRange(%41, %43) -> bb14;
    }
    bb14 {
        %39 = <ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0> %47;
        %49 = %39;
        %51 = newType error|();
        %53 = newType error|();
        %55 = ConstLoad false;
        %48 = createPipeline(%49, %51, %53, %55) -> bb15;
    }
    bb15 {
        %63 = fp $anon/.:0.0.0::$streamLambda$_0;
        %62 = createInputFunction(%63) -> bb16;
    }
    bb16 {
        %67 = %48;
        %69 = %62;
        %73 = addStreamFunction(%67, %69) -> bb17;
    }
    bb17 {
        %75 = fp $anon/.:0.0.0::$streamLambda$_1;
        %74 = createDoFunction(%75) -> bb18;
    }
    bb18 {
        %79 = %48;
        %81 = %74;
        %85 = addStreamFunction(%79, %81) -> bb19;
    }
    bb19 {
        %87 = %48;
        %86 = getStreamFromPipeline(%87) -> bb20;
    }
    bb20 {
        %92 = %86;
        %91 = consumeStream(%92) -> bb21;
    }
    bb21 {
        %4 = %91 is error{map<ballerina/lang.value:0.0.0:Cloneable>};
        %4? bb22 : bb24;
    }
    bb22 {
        %99 = <error> %91;
        %103 = getQueryErrorRootCause(%99) -> bb23;
    }
    bb23 {
        %0 = <error> %103;
        GOTO bb56;
    }
    bb24 {
        %4 = %91 is ();
        %4? bb25 : bb26;
    }
    bb25 {
        %104 = ConstLoad true;
        GOTO bb27;
    }
    bb26 {
        %104 = %91 is error{map<ballerina/lang.value:0.0.0:Cloneable>};
        GOTO bb27;
    }
    bb27 {
        %4 = not %104;
        %4? bb28 : bb29;
    }
    bb28 {
        %0 = <error|()> %91;
        GOTO bb56;
    }
    bb29 {
        %4 = %91 is ballerina/lang.query:0.0.0:CompleteEarlyError|ballerina/lang.query:0.0.0:Error;
        %4? bb30 : bb32;
    }
    bb30 {
        %118 = <error> %91;
        %103 = getQueryErrorRootCause(%118) -> bb31;
    }
    bb31 {
        %117 = <error> %103;
        %91 = <any|error{map<ballerina/lang.value:0.0.0:Cloneable>}> %117;
        GOTO bb32;
    }
    bb32 {
        %4 = %91 is ballerina/lang.query:0.0.0:CompleteEarlyError|ballerina/lang.query:0.0.0:Error;
        %4? bb33 : bb35;
    }
    bb33 {
        %118 = <error{map<ballerina/lang.value:0.0.0:Cloneable>}> %91;
        %103 = getQueryErrorRootCause(%118) -> bb34;
    }
    bb34 {
        %117 = <error> %103;
        %91 = <any|error{map<ballerina/lang.value:0.0.0:Cloneable>}> %117;
        GOTO bb35;
    }
    bb35 {
        %131 = <error{map<ballerina/lang.value:0.0.0:Cloneable>}|()> %91;
        %134 = baz() -> bb36;
    }
    bb36 {
        %4 = %134 is ();
        %4? bb37 : bb38;
    }
    bb37 {
        %133 = <()> %134;
        GOTO bb39;
    }
    bb38 {
        %8 = <error> %134;
        GOTO bb4;
    }
    bb39 {
        %144 = foo() -> bb40;
    }
    bb40 {
        %4 = %144 is ();
        %4? bb41 : bb42;
    }
    bb41 {
        %143 = <()> %144;
        GOTO bb51;
    }
    bb42 {
        %8 = <error> %144;
        GOTO bb43;
    }
    bb43 {
        %152 = ConstLoad abc;
        %155 = foo() -> bb44;
    }
    bb44 {
        %4 = %155 is ();
        %4? bb45 : bb46;
    }
    bb45 {
        %154 = <()> %155;
        GOTO bb47;
    }
    bb46 {
        %8 = <error> %155;
        GOTO bb4;
    }
    bb47 {
        %165 = baz() -> bb48;
    }
    bb48 {
        %4 = %165 is ();
        %4? bb49 : bb50;
    }
    bb49 {
        %164 = <()> %165;
        GOTO bb55;
    }
    bb50 {
        %8 = <error> %165;
        GOTO bb4;
    }
    bb51 {
        %176 = baz() -> bb52;
    }
    bb52 {
        %4 = %176 is ();
        %4? bb53 : bb54;
    }
    bb53 {
        %175 = <()> %176;
        GOTO bb55;
    }
    bb54 {
        %8 = <error> %176;
        GOTO bb43;
    }
    bb55 {
        %0 = ConstLoad 0;
        GOTO bb56;
    }
    bb56 {
        return;
    }


}
